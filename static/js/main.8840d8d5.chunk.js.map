{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","fSubmit","e","preventDefault","console","log","datas","state","name","refs","value","address","act","data","push","i","index","setState","myForm","reset","focus","fDelete","splice","fUpdate","this","className","style","fontWeight","fontSize","ref","id","type","placeholder","aria-label","aria-describedby","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOA0GeA,G,wDAtGb,aAAe,IAAD,8BACZ,gBAYFC,QAAU,SAAAC,GACRA,EAAEC,iBACFC,QAAQC,IAAI,UAEZ,IAAIC,EAAQ,EAAKC,MAAMD,MACnBE,EAAO,EAAKC,KAAKD,KAAKE,MACtBC,EAAU,EAAKF,KAAKE,QAAQD,MAEhC,GAAsB,IAAnB,EAAKH,MAAMK,IAAW,CACvB,IAAIC,EAAO,CACTL,OACAG,WAEFL,EAAMQ,KAAKD,OAER,CACH,IAAIE,EAAI,EAAKR,MAAMS,MACnBV,EAAMS,GAAGP,KAAOA,EAChBF,EAAMS,GAAGJ,QAAUA,EAGrB,EAAKM,SAAS,CACZX,MAAOA,EACPM,IAAK,IAGP,EAAKH,KAAKS,OAAOC,QACjB,EAAKV,KAAKD,KAAKY,SAxCH,EA2CdC,QAAU,SAAAN,GACR,IAAIT,EAAQ,EAAKC,MAAMD,MACvBA,EAAMgB,OAAOP,EAAG,GAChB,EAAKE,SAAS,CACZX,MAAOA,IAGT,EAAKG,KAAKS,OAAOC,QACjB,EAAKV,KAAKD,KAAKY,SAnDH,EAsDdG,QAAU,SAAAR,GACR,IAAIF,EAAO,EAAKN,MAAMD,MAAMS,GAC5B,EAAKN,KAAKD,KAAKE,MAAQG,EAAKL,KAC5B,EAAKC,KAAKE,QAAQD,MAAQG,EAAKF,QAE/B,EAAKM,SAAS,CACZL,IAAK,EACLI,MAAOD,KA3DT,EAAKR,MAAQ,CACXK,IAAK,EACLI,MAAO,GACPV,MAAO,IALG,E,gEAUZkB,KAAKf,KAAKD,KAAKY,U,+BAuDP,IAAD,OACP,OACE,yBAAKK,UAAU,iBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,YAAYC,MAAO,CAACC,WAAY,SAAUC,SAAU,SAAlE,2BAEF,0BAAMH,UAAU,mBAAmBI,IAAI,UACrC,yBAAKJ,UAAU,2BACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBK,GAAG,kBAAiB,uBAAGL,UAAU,kBAEtE,2BAAOM,KAAK,OAAOF,IAAI,OAAOJ,UAAU,eAAeO,YAAY,YAAYC,aAAW,YAAYC,mBAAiB,oBAEzH,yBAAKT,UAAU,2BACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBK,GAAG,kBAAiB,uBAAGL,UAAU,0BAEtE,2BAAOM,KAAK,OAAOF,IAAI,UAAUJ,UAAU,eAAeO,YAAY,eAAeC,aAAW,eAAeC,mBAAiB,oBAElI,4BAAQH,KAAK,SAASN,UAAU,oCAAoCU,QAAS,SAACjC,GAAD,OAAO,EAAKD,QAAQC,KAAjG,WAEF,wBAAIuB,UAAU,+BAEVD,KAAKjB,MAAMD,MAAM8B,KAAI,SAACvB,EAAME,GAAP,OACnB,yBAAKU,UAAU,gDAAgDY,IAAKtB,GAClE,yBAAKU,UAAU,eAAc,2BAAIV,EAAE,EAAN,KAA7B,IAA4CF,EAAKL,KAAjD,KAAyDK,EAAKF,SAC9D,yBAAKc,UAAU,OAAM,4BAAQA,UAAU,uBAAuBU,QAAS,kBAAM,EAAKZ,QAAQR,KAAI,uBAAGU,UAAU,kBAC3G,yBAAKA,UAAU,OAAM,4BAAQA,UAAU,sBAAsBU,QAAS,kBAAM,EAAKd,QAAQN,KAAI,uBAAGU,UAAU,iC,GA7FxGa,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.8840d8d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      act: 0,\n      index: '',\n      datas: [],\n    }\n  }\n\n  componentDidMount() {\n    this.refs.name.focus()\n  }\n\n  fSubmit = e => {\n    e.preventDefault()\n    console.log('Submit')\n\n    let datas = this.state.datas;\n    let name = this.refs.name.value;\n    let address = this.refs.address.value;\n\n    if(this.state.act === 0) {\n      let data = {\n        name,\n        address\n      }\n      datas.push(data)\n    }\n    else {\n      let i = this.state.index\n      datas[i].name = name\n      datas[i].address = address\n    }\n\n    this.setState({\n      datas: datas,\n      act: 0\n    })\n\n    this.refs.myForm.reset()\n    this.refs.name.focus()\n  }\n\n  fDelete = i => {\n    let datas = this.state.datas\n    datas.splice(i, 1)\n    this.setState({\n      datas: datas\n    })\n\n    this.refs.myForm.reset()\n    this.refs.name.focus()\n  }\n  \n  fUpdate = i => {\n    let data = this.state.datas[i]\n    this.refs.name.value = data.name\n    this.refs.address.value = data.address\n\n    this.setState({\n      act: 1,\n      index: i\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\" style={{fontWeight: 'bolder', fontSize: '40px'}}>React CRUD Application</h1>\n        </div>\n        <form className=\"col-md-6 mx-auto\" ref=\"myForm\">\n          <div className=\"input-group flex-nowrap\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"addon-wrapping\"><i className=\"fas fa-user\"></i></span>\n            </div>\n            <input type=\"text\" ref=\"name\" className=\"form-control\" placeholder=\"Your Name\" aria-label=\"Your Name\" aria-describedby=\"addon-wrapping\"/>\n          </div>\n          <div className=\"input-group flex-nowrap\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"addon-wrapping\"><i className=\"fas fa-address-book\"></i></span>\n            </div>\n            <input type=\"text\" ref=\"address\" className=\"form-control\" placeholder=\"Your Address\" aria-label=\"Your Address\" aria-describedby=\"addon-wrapping\"/>\n          </div>\n          <button type=\"button\" className=\"btn btn-outline-primary mt-2 mb-2\" onClick={(e) => this.fSubmit(e)}>Submit</button>\n        </form>\n        <ul className=\"list-group col-md-6 mx-auto\">\n          {\n            this.state.datas.map((data, i) => (\n              <div className=\"list-group-item list-group-item-action d-flex\" key={i}>\n                <div className=\"mr-auto p-2\"><b>{i+1}.</b> {data.name}, {data.address}</div>\n                <div className=\"p-2\"><button className=\"text-primary ml-auto\" onClick={() => this.fUpdate(i)}><i className=\"fas fa-edit\"></i></button></div>\n                <div className=\"p-2\"><button className=\"text-danger ml-auto\" onClick={() => this.fDelete(i)}><i className=\"fas fa-trash-alt\"></i></button></div>\n              </div>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}